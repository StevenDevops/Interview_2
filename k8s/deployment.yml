apiVersion: "v1"
kind: "Service"
metadata:
  name: "flask-service"
  namespace: "default"
  labels:
    app: "flask"
spec:
  ports:
    - protocol: "TCP"
      port: 80
      targetPort: 5000
  selector:
    app: "flask"
  type: "LoadBalancer"
  externalTrafficPolicy: Local
  loadBalancerIP: ""
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  name: "postgres-config"
  namespace: "default"
  labels:
    app: "postgres"
data:
  POSTGRES_DB: "recipe_db"
  POSTGRES_USER: "steven"
  POSTGRES_PASSWORD: "12345"

---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "postgres"
  namespace: "default"
  labels:
    app: "postgres"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "postgres"
  template:
    metadata:
      labels:
        app: "postgres"
    spec:
      containers:
        - name: "postgres"
          image: "postgres:10.1"
          env:
            - name: "POSTGRES_DB"
              valueFrom:
                configMapKeyRef:
                  key: "POSTGRES_DB"
                  name: "postgres-config"
            - name: "POSTGRES_USER"
              valueFrom:
                configMapKeyRef:
                  key: "POSTGRES_USER"
                  name: "postgres-config"
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                configMapKeyRef:
                  key: "POSTGRES_PASSWORD"
                  name: "postgres-config"
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/db-data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: postgres

---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "flask"
  namespace: "default"
  labels:
    app: flask
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      initContainers:
        - name: check-db-ready
          image: "postgres:10.1"
          command: ['sh', '-c',
              'until pg_isready -h postgres -p 5432;
          do echo waiting for database; sleep 2; done;']
      containers:
        - name: "flask"
          image: "864185773574.dkr.ecr.ap-northeast-1.amazonaws.com/flask_app"
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /api/v1/
              port: 5000
            initialDelaySeconds: 40
            timeoutSeconds: 20
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /api/v1/
              port: 5000
